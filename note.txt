SpringBoot学习笔记
一、入门
1、Springboot的目标
    1、为所有Spring开发提供一个更快、更广泛的入门体验。
    2、提供一系列非功能性的特性，这些特性对于大型项目来说是常见的（例如嵌入式服务器、安全性、度量标准、健康检
       查、外部化配置）。
    3、减少XML配置。
2、安装Springboot
    <!-- 默认从Springboot继承 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.4.RELEASE</version>
    </parent>
---------------------------------------2018-06-27---------------------------------------
二、使用Springboot
1、依赖管理
    a、使用parent pom，参考【一、入门==》2、安装Springboot】。
    b、不使用parent pom
    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.4.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
2、修改JDK版本
    <properties>
        <java.version>1.8</java.version>
    </properties>
3、使用Springboot的maven插件，该插件可以将Springboot工程打包成一个可执行jar文件
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
4、Starts
    Springboot默认提供了一些starts供用户使用，这些Starts的命名是类似的：spring-boot-starter-*，第三
方的Starts则不是以spring-boot开头的。具体Starts列表参考官方文档的13.5章节Starters。
---------------------------------------2018-06-27---------------------------------------
5、组织代码结构
    一个典型的结构如下，：

    com
        +- example
            +- myproject
                +- Application.java
                |
                +- domain
                | +- Customer.java
                | +- CustomerRepository.java
                |
                +- service
                | +- CustomerService.java
                |
                +- web
                +- CustomerController.java

    主应用程序类Application.java应位于其它所有类的根package下，并声明main方法，作为程序的入口。

    package com.example.myproject;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    @EnableAutoConfiguration
    @ComponentScan
    public class Application {
        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }
    }

6、配置类
    Springboot支持并建议基于Java的配置，@Configuration
6.1、导入额外的配置类
    可以通过@ComponentScan注解扫描获取Spring components，其中就包括了@Configuration类；
    也可以通过使用@Import注解导入额外的配置类
6.2、导入XML配置
    使用 @ImportResource注解添加额外的XML配置
---------------------------------------2018-06-27---------------------------------------
7、自动配置
    Springboot自动配置会根据添加的jar包尝试自动配置Spring应用程序。
7.1、自定义配置
    Springboot的自动配置是无侵入式的，任何时候，可用通过定义自己的配置来覆盖掉自动配置。比如定义了一个
Datasource，则默认的Datasource将不会生效。
7.2、禁用特定的自动配置
    使用@EnableAutoConfiguration注解的exclude属性，如下所示：

    import org.springframework.boot.autoconfigure.*;
    import org.springframework.boot.autoconfigure.jdbc.*;
    import org.springframework.context.annotation.*;

    @Configuration
    @EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
        public class MyConfiguration {
    }

    如果该类不在类路径中，可以使用注释的excludeName属性，并指定完全限定的名称。
---------------------------------------2018-06-28---------------------------------------
8、Spring Beans和依赖注入
    简单期间，可以使用@ComponentScan+ @Autowired构造注入。
    如果使用推荐的代码结构，则@ComponentScan注解会自动注册所有的components (@Component, @Service,
@Repository, @Controller etc.)
9、@SpringBootApplication注解
@SpringBootApplication=@Configuration+@EnableAutoConfiguration+@ComponentScan
10、Developer tools
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

10.1、默认属性值
    缓存在生产中是非常有益的，但在开发过程中它可能会产生反效果，比如阻止你看到你在应用程序中所做的更改。所以
devtools在默认情况下会禁用这些缓存选项。这些缓存选项通常配置在application.properties文件中，具体可参考
https://github.com/spring-projects/spring-boot/blob/v1.5.4.RELEASE/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java
10.2、自动重启
    默认情况下，devtools会监控classpath路径，当有文件修改时会自动重启。需要注意的是，静态资产和视图模板等
特定资源不需要重新启动。在IDEA下，构建工程 (Build -> Make Project)会触发自动重启。
10.3、过滤资源
    默认情况下，以下路径资源的修改不会触发重新启动，但是会触发重新加载：
    /META-INF/maven, /META-INF/resources ,/resources ,/static ,/public or /templates
    可以通过设置spring.devtools.restart.exclude属性定制化过滤的资源。例如只想过滤static和public路径
    spring.devtools.restart.exclude=static/**,public/**
    如果想要保持默认的配置，并添加额外的过滤，可以使用spring.devtools.restart.additional-exclude
10.4、禁用重新启动
    可以在application.properties文件中配置如下属性：spring.devtools.restart.enabled=false
    如果要完全禁用重新启动，则：
    public static void main(String[] args) {
        System.setProperty("spring.devtools.restart.enabled", "false");
        SpringApplication.run(MyApp.class, args);
    }
---------------------------------------2018-06-29---------------------------------------
11、SpringApplication
    11.1、设置banner
    在classpath添加banner.txt文件，可以设置启动时的标语。可以借助以下工具轻松地生成banner字符串：
    http://patorjk.com/software/taag
    11.2、定制SpringApplication
    有两种方式定制SpringApplication，一种是new一个SpringApplication对象，然后设置其属性，如下所示代
码片段，设置禁用banner：
    public static void main(String[] args) {
        SpringApplication app = new SpringApplication(MySpringConfiguration.class);
        app.setBannerMode(Banner.Mode.OFF);
        app.run(args);
    }

    另一种方式是使用application.properties文件。
    11.3、在SpringApplication启动后运行一些代码
    如果想在SpringApplication启动后运行一些特定的代码，可以实现ApplicationRunner接口或者
CommandLineRunner接口，如果有多个，并且需要指定其执行顺序，可以实现Order接口或使用@Order注解，Order的
顺序值越小，优先级越高。如下两个Runner，SpringApplication启动后先执行MyCommandLineRunner的run方法，
再执行MyApplicationRunner的run方法。
    @Order(2)
    @Component
    public class MyApplicationRunner implements ApplicationRunner {
        @Override
        public void run(ApplicationArguments args) throws Exception {
            System.out.println("hello myrunner");
        }
    }

    @Order(1)
    @Component
    public class MyCommandLineRunner implements CommandLineRunner {
        @Override
        public void run(String... args) throws Exception {
            System.out.println("hello command line runner");
        }
    }
---------------------------------------2018-07-02---------------------------------------