SpringBoot学习笔记
一、入门
1、Springboot的目标
    1、为所有Spring开发提供一个更快、更广泛的入门体验。
    2、提供一系列非功能性的特性，这些特性对于大型项目来说是常见的（例如嵌入式服务器、安全性、度量标准、健康检
       查、外部化配置）。
    3、减少XML配置。
2、安装Springboot
    <!-- 默认从Springboot继承 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.4.RELEASE</version>
    </parent>
---------------------------------------2018-06-27---------------------------------------
二、使用Springboot
1、依赖管理
    a、使用parent pom，参考【一、入门==》2、安装Springboot】。
    b、不使用parent pom
    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.4.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
2、修改JDK版本
    <properties>
        <java.version>1.8</java.version>
    </properties>
3、使用Springboot的maven插件，该插件可以将Springboot工程打包成一个可执行jar文件
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
4、Starts
    Springboot默认提供了一些starts供用户使用，这些Starts的命名是类似的：spring-boot-starter-*，第三
方的Starts则不是以spring-boot开头的。具体Starts列表参考官方文档的13.5章节Starters。
---------------------------------------2018-06-27---------------------------------------
5、组织代码结构
    一个典型的结构如下，：

    com
        +- example
            +- myproject
                +- Application.java
                |
                +- domain
                | +- Customer.java
                | +- CustomerRepository.java
                |
                +- service
                | +- CustomerService.java
                |
                +- web
                +- CustomerController.java

    主应用程序类Application.java应位于其它所有类的根package下，并声明main方法，作为程序的入口。

    package com.example.myproject;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    @EnableAutoConfiguration
    @ComponentScan
    public class Application {
        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }
    }

6、配置类
    Springboot支持并建议基于Java的配置，@Configuration
6.1、导入额外的配置类
    可以通过@ComponentScan注解扫描获取Spring components，其中就包括了@Configuration类；
    也可以通过使用@Import注解导入额外的配置类
6.2、导入XML配置
    使用 @ImportResource注解添加额外的XML配置
7、自动配置

